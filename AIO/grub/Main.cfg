set hotkey="_"

source ${menudir}/Main.cfg;
### Start InstallWinISO
GetHotkey
menuentry "[${hotkey}] ${installwiniso}" --hotkey=${hotkey} {
	#unset ignore_fs_args
	#unset ignore_dir_args
	#export ignore_fs_args="fat procfs pyfs"
	#export ignore_dir_args="procfs pyfs"
	unset pim
	unset fs_args
	unset file_ext_args
	unset file_in_loop_args
	export fs_args="fat ntfs exfat"
	export file_ext_args="iso"
	export file_in_loop_args="/sources/install.wim /x64/sources/install.esd /x86/sources/install.esd /sources/install.esd"
	if [ -n "$pc" ]; then export file_in_loop_args="${file_in_loop_args} /I386/TXTSETUP.SIF /AMD64/TXTSETUP.SIF"; fi
	configfile ${prefix}/FileManager.cfg
}
### End InstallWinISO
### Start ISO & IMG Mapper
if [ "$scheme" == "msdos" ]; then
GetHotkey
submenu "[${hotkey}] ISO & IMG Mapper" --hotkey=${hotkey} {
	#unset ignore_fs_args
	#unset ignore_dir_args
	#export ignore_fs_args="fat procfs pyfs"
	#export ignore_dir_args="procfs pyfs"
	unset fs_args
	unset file_ext_args
	unset file_in_loop_args
	export file_ext_args="iso img fs"
	export pim=1
	FileManager "(${root})"
}
fi
### End ISO & IMG Mapper
### Start BootFrom
GetHotkey
menuentry "[${hotkey}] ${bootfrom}" --hotkey=${hotkey} {
	#unset fs_args
	#unset ignore_fs_args
	#unset ignore_dir_args
	#export fs_args="fat ntfs exfat"
	#export ignore_fs_args="fat procfs pyfs"
	#export ignore_dir_args="procfs pyfs"
	unset pim
	unset fs_args
	unset file_ext_args
	unset file_in_loop_args
	export file_ext_args="iso wim vhd vhdx img"
	configfile ${prefix}/FileManager.cfg
}
### End BootFrom
### Start File Manager
GetHotkey
menuentry "[${hotkey}] ${fm}" --hotkey=${hotkey} {
	if [ -n "$pc" ] -a [ -e /AIO/grubfm/loadfm ] -a [ -e /AIO/grubfm/grubfm.iso ]; then
		linux	/AIO/grubfm/loadfm
		initrd	/AIO/grubfm/grubfm.iso
	elif [ -n "$efi" ] -a [ -e /AIO/grubfm/grubfm${_SPEC_UEFI_ARCH}.efi ]; then
		chainloader /AIO/grubfm/grubfm${_SPEC_UEFI_ARCH}.efi
	else
		unset fs_args
		unset file_ext_args
		unset file_in_loop_args
		configfile ${prefix}/FileManager.cfg
	fi
}
### End File Manager
### Start WinOnHDD
GetHotkey
menuentry "[${hotkey}] ${winhdd}" --hotkey=${hotkey} {
	WindowsDetect
}
### End WinOnHDD
### Start OSHdd
GetHotkey
menuentry "[${hotkey}] ${oshdd}" --hotkey=${hotkey} {
	configfile ${prefix}/OSHDD.cfg
}
### End OSHdd
### Start Custom
if [ -e ${menudir}/Custom.cfg ]; then
	source ${menudir}/Custom.cfg;
fi
### End Custom
### Start Grub4dos
if [ -n "$pc" ]; then
GetHotkey
menuentry "[${hotkey}] Grub4dos" --hotkey=${hotkey} {
	Grub4dosRoot
	set opt="root ${g4droot};configfile /AIO/Menu/Grub4dos.lst"
	linux ${g4d_path}/grub.exe --config-file=${opt}
}
fi
### End Grub4dos
if [ -n "$efi" -a -z "$cd" ]; then
if [ xx64 = x$_SPEC_UEFI_ARCH ]; then
### Start Clover UEFI
	GetHotkey
	menuentry "[${hotkey}] Clover Bootloader" --hotkey=${hotkey} {
		search --file --no-floppy --set=root /EFI/BOOT/EFIPART
		chainloader /EFI/CLOVER/CLOVERX64.efi
	}
### End Clover UEFI
fi
### Start refind
	GetHotkey
	menuentry "[${hotkey}] rEFInd" --hotkey=${hotkey} {
		search --file --no-floppy --set=root /EFI/BOOT/EFIPART
		chainloader /EFI/refind/refind_${_SPEC_UEFI_ARCH}.efi
	}
### End refind
fi
### Start Search Grub2 configfile
GetHotkey
menuentry "[${hotkey}] ${searchcfgmenu}" --hotkey=${hotkey} {
	configfile ${prefix}/SearchGrub2Cfg.cfg
}
### End Search Grub2 configfile
### Start Refresh
GetHotkey
menuentry "[${hotkey}] ${f5}" --hotkey=${hotkey} {
	search --file --no-floppy --set=root /AIO/aioboot.com.html
	if [ -n "${efi}" ]; then
		chainloader /efi/boot/boot${_SPEC_UEFI_ARCH}.efi
	else
		multiboot /aio/grub/i386-pc/core.img
	fi
}
### End Refresh
### Start halt
GetHotkey
menuentry "[${hotkey}] ${halt}" --hotkey=${hotkey} {
	halt
}
### End halt
### Start reboot
GetHotkey
menuentry "[${hotkey}] ${reboot}" --hotkey=${hotkey} {
	reboot
}
### End reboot
### Start changeroot
GetHotkey
menuentry "[${hotkey}] ${changeroot}" --hotkey=${hotkey} {
	configfile ${prefix}/ChangeRoot.cfg
}
### End changeroot
### Start help
GetHotkey
submenu "[${hotkey}] ${settings}" --hotkey=${hotkey} {
	set hotkey="_"
	GetHotkey
	submenu "[${hotkey}] ${bgmenu}" --hotkey=${hotkey} {
		ChangeBackground
	}
	GetHotkey
	submenu "[${hotkey}] ${langmenu}" --hotkey=${hotkey} {
		ChangeLanguage
	}
	if [ "$font" == "unicode-small" ]; then fontmenu="${largefont}"; else fontmenu="${smallfont}"; fi
	GetHotkey
	menuentry "[${hotkey}] ${fontmenu}" --hotkey=${hotkey} {
		if [ "$font" != "unicode-small" ]; then font=unicode-small;
		elif [ -z "$lang" ]; then font=DejaVuSansMono-large; else font=unicode-large; fi
		save_env font
		unset bgloaded
		configfile ${prefix}/grub.cfg
	}
	GetHotkey
	menuentry "[${hotkey}] ${timeoutmenu}" --hotkey=${hotkey} {
		echo "${timeoutmsg}:"
		read time_out
		if regexp '^[0-9]+([0-9]+)?$' "$time_out"; then
			settimeout "$time_out"
			echo -n -e "\n${donemsg}"
		else
			echo -n -e "\n${errormsg}! ${timeoutmsg}."
		fi
		esc 2
		unset time_out
	}
}
### End help