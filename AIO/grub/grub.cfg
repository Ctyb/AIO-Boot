#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by grub2-mkconfig using templates
# from /etc/grub.d and settings from /etc/default/grub
#

### BEGIN /etc/grub.d/00_header ###

if [ -s $prefix/grubenv ]; then
  load_env
  if [ -e ${prefix}/grubenv_${grub_platform} ]; then
		load_env --file ${prefix}/grubenv_${grub_platform}
  fi
fi

if [ "${grub_platform}" == "efi" ]; then
	set modules="gfxmenu part_acorn part_apple part_bsd part_dfly part_dvh part_plan part_sun part_sunpc"
	export efi=1
	if [ "${grub_cpu}" == "x86_64" ]; then
		export _SPEC_UEFI_ARCH="x64"
		export _SPEC_UEFI_ARCH_2="64"
		export _SPEC_UEFI_ARCH_3="64"
	else
		export _SPEC_UEFI_ARCH="ia32"
		export _SPEC_UEFI_ARCH_2="86"
		export _SPEC_UEFI_ARCH_3="32"
	fi
	if [ x"$secureboot" == xON ] -a [ -z "$fucksb_done" ]; then
		sbpolicy -i
		fucksb -i
		fucksb --off
		export fucksb_done="?"
	fi
elif [ "${grub_platform}" == "pc" ]; then
	set modules="gfxmenu search linux linux16 afs bfs ext2 f2fs hfs hfsplus iso9660 jfs part_acorn part_apple part_bsd part_dfly part_dvh part_plan part_sun part_sunpc udf ufs1 ufs1_be ufs2 xfs zfs sfs progress"
	export pc=1
	export memdisk="(${root})/AIO/Tools/memdisk"
	export g4d_path="(${root})/AIO/Tools/grub4dos"
fi

for module in ${modules}; do
	insmod ${module}
done
unset modules

if [ "${next_entry}" ] ; then
   set default="${next_entry}"
   set next_entry=
   save_env next_entry
   set boot_once=true
else
   if [ x"${saved_entry}" = x ] ; then set default="0"; else set default="${saved_entry}"; fi
fi

if [ x"${feature_menuentry_id}" = xy ]; then
  menuentry_id_option="--id"
else
  menuentry_id_option=""
fi

export menuentry_id_option

if [ "${prev_saved_entry}" ]; then
  set saved_entry="${prev_saved_entry}"
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ -z "$bgloaded" ]; then
	if [ -z "${font}" ]; then
		if [ -e ${prefix}/fonts/fonts.cfg ]; then source ${prefix}/fonts/fonts.cfg; else font=unicode-small; fi
	fi
	if loadfont $font ; then
		set gfxmode=1024x768x32,1024x768x24,1024x768x16,1024x768,auto
		set gfxpayload=keep
		export font
		load_video
		insmod gfxterm
		terminal_output gfxterm
		if [ -z "${bg}" ]; then
			if [ -e ${prefix}/background.cfg ]; then source ${prefix}/background.cfg;
			else
				bg="splash.png"
				export bg
				save_env bg
			fi
		else export bg; fi
		insmod png
		insmod jpeg
		background_image -m stretch "${prefix}/themes/${bg}"
		export bgloaded="ok"
	fi
fi
if [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
  if [ -z "${timeout}" ]; then set timeout=15; fi
# Fallback normal timeout code in case the timeout_style feature is
# unavailable.
else
  if [ -z "${timeout}" ]; then set timeout=15; fi
fi

export menudir="(${root})/AIO/Menu"

probe -l -s rootlabel $root
probe -u -s rootuuid $root
probe -p -s scheme $root
probe -f -s fs $root
export rootlabel
export rootuuid
export scheme
export fs

if [ "${fs}" == "iso9660" ]; then set cd=1; export cd; fi

if [ -e ${prefix}/Password.cfg ]; then
	source ${prefix}/Password.cfg
fi
source ${prefix}/locale/Lang.cfg
source ${prefix}/Functions.cfg
source ${prefix}/Main.cfg

export enable_progress_indicator=0

### END /etc/grub.d/00_header ###

### BEGIN /etc/grub.d/10_linux ###

### END /etc/grub.d/10_linux ###

### BEGIN /etc/grub.d/20_linux_xen ###
### END /etc/grub.d/20_linux_xen ###

### BEGIN /etc/grub.d/30_os-prober ###
### END /etc/grub.d/30_os-prober ###

### BEGIN /etc/grub.d/40_custom ###
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
### END /etc/grub.d/40_custom ###

### BEGIN /etc/grub.d/41_custom ###
#if [ -f  ${config_directory}/custom.cfg ]; then
#  source ${config_directory}/custom.cfg
#elif [ -z "${config_directory}" -a -f  $prefix/custom.cfg ]; then
#  source $prefix/custom.cfg;
#fi
### END /etc/grub.d/41_custom ###
